#!/usr/bin/env node

/**
 * Script para verifica√ß√£o ortogr√°fica dos textos em portugu√™s
 * Utiliza o dicion√°rio brasileiro e verifica textos em arquivos JSX/TSX
 * 
 * Para executar:
 * node scripts/spelling-check.js
 */

const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const readdir = promisify(fs.readdir);
const readFile = promisify(fs.readFile);
const chalk = require('chalk');

// Palavras comuns que s√£o t√©cnicas ou espec√≠ficas
const whitelist = [
  'minecraft', 'login', 'logout', 'dashboard', 'admin', 'sidebar',
  'premium', 'checkout', 'api', 'online', 'offline', 'email', 'app',
  'frontend', 'backend', 'minecraftloja', 'cart', 'token', 'download',
  'skin', 'account', 'username', 'password', 'storage', 'google', 'browser'
];

// Corre√ß√µes comuns de ortografia em portugu√™s
const corrections = {
  'nao': 'n√£o',
  'esta': 'est√°',
  'voce': 'voc√™',
  'tambem': 'tamb√©m',
  'disponivel': 'dispon√≠vel',
  'historico': 'hist√≥rico',
  'possivel': 'poss√≠vel',
  'facil': 'f√°cil',
  'pagina': 'p√°gina',
  'codigo': 'c√≥digo',
  'metodo': 'm√©todo',
  'credito': 'cr√©dito',
  'cartao': 'cart√£o',
  'rapido': 'r√°pido',
  'numero': 'n√∫mero',
  'ultima': '√∫ltima',
  'multiplas': 'm√∫ltiplas',
  'multiplos': 'm√∫ltiplos',
  'obrigatorio': 'obrigat√≥rio',
  'endereco': 'endere√ßo',
  'opcoes': 'op√ß√µes',
  'transacao': 'transa√ß√£o',
  'seguranca': 'seguran√ßa',
  'necessario': 'necess√°rio',
  'facam': 'fa√ßam',
  'atencao': 'aten√ß√£o',
  'referencia': 'refer√™ncia',
  'informatica': 'inform√°tica',
  'tecnico': 't√©cnico',
  'anuncio': 'an√∫ncio',
  'pratico': 'pr√°tico',
  'maximo': 'm√°ximo',
  'minimo': 'm√≠nimo',
  'duvida': 'd√∫vida',
  'invalido': 'inv√°lido',
  'valido': 'v√°lido',
  'aplicacao': 'aplica√ß√£o',
  'promocao': 'promo√ß√£o',
  'espaco': 'espa√ßo',
  'memoria': 'mem√≥ria',
  'automatica': 'autom√°tica',
  'automatico': 'autom√°tico',
  'economico': 'econ√¥mico',
  'agencia': 'ag√™ncia',
  'conteudo': 'conte√∫do',
  'nivel': 'n√≠vel',
  'basico': 'b√°sico',
  'intermediario': 'intermedi√°rio',
  'avancado': 'avan√ßado',
  'serie': 's√©rie',
  'multiplo': 'm√∫ltiplo',
  'exclusao': 'exclus√£o',
  'publico': 'p√∫blico',
  'estatisticas': 'estat√≠sticas',
  'icone': '√≠cone'
};

// Diret√≥rios para verifica√ß√£o
const directories = [
  path.join(__dirname, '../app'),
  path.join(__dirname, '../pages'),
  path.join(__dirname, '../components')
];

// Extens√µes de arquivos a verificar
const extensions = ['.js', '.jsx', '.ts', '.tsx'];

// Express√£o regular para extrair textos em portugu√™s
const textRegex = /(['"])([^'"]*[√°√†√¢√£√©√®√™√≠√Ø√≥√¥√µ√∫√º√ß√Å√Ä√Ç√É√â√à√ä√ç√è√ì√î√ï√ö√ú√á][^'"]*)\1/g;

// Express√£o regular para identificar palavras
const wordRegex = /[a-zA-Z√°√†√¢√£√©√®√™√≠√Ø√≥√¥√µ√∫√º√ß√Å√Ä√Ç√É√â√à√ä√ç√è√ì√î√ï√ö√ú√á]+/g;

// Fun√ß√£o principal
async function main() {
  console.log(chalk.blue('üîé Iniciando verifica√ß√£o ortogr√°fica...'));
  let filesChecked = 0;
  let issuesFound = 0;

  for (const dir of directories) {
    try {
      await checkDirectory(dir);
    } catch (err) {
      console.error(chalk.red(`Erro ao verificar diret√≥rio ${dir}:`), err);
    }
  }

  console.log(chalk.green(`‚úÖ Verifica√ß√£o conclu√≠da! ${filesChecked} arquivos verificados.`));
  if (issuesFound > 0) {
    console.log(chalk.yellow(`‚ö†Ô∏è ${issuesFound} poss√≠veis problemas encontrados.`));
  } else {
    console.log(chalk.green('üëç Nenhum problema encontrado!'));
  }

  // Fun√ß√£o para verificar um diret√≥rio recursivamente
  async function checkDirectory(directory) {
    const items = await readdir(directory, { withFileTypes: true });
    
    for (const item of items) {
      const fullPath = path.join(directory, item.name);
      
      if (item.isDirectory()) {
        // Ignorar node_modules
        if (item.name === 'node_modules') continue;
        await checkDirectory(fullPath);
      } else if (item.isFile() && extensions.includes(path.extname(item.name))) {
        await checkFile(fullPath);
        filesChecked++;
      }
    }
  }

  // Fun√ß√£o para verificar um arquivo
  async function checkFile(filePath) {
    try {
      const content = await readFile(filePath, 'utf8');
      const relPath = path.relative(process.cwd(), filePath);
      
      // Encontrar todos os textos em portugu√™s
      const matches = [...content.matchAll(textRegex)];
      
      for (const match of matches) {
        const text = match[2];
        if (text.length < 3) continue; // Ignorar textos muito curtos
        
        // Verificar cada palavra no texto
        const words = text.match(wordRegex) || [];
        for (const word of words) {
          // Ignorar palavras curtas ou na whitelist
          if (word.length < 3 || whitelist.includes(word.toLowerCase())) {
            continue;
          }
          
          // Verificar se √© uma palavra sem acentua√ß√£o que deveria ter
          const lowerWord = word.toLowerCase();
          if (corrections[lowerWord]) {
            console.log(chalk.yellow(`Poss√≠vel erro ortogr√°fico em ${chalk.cyan(relPath)}:`));
            console.log(`  "${word}" - Sugest√£o: "${corrections[lowerWord]}"`);
            console.log(`  Contexto: "${text.slice(0, 50)}${text.length > 50 ? '...' : ''}"`);
            console.log();
            issuesFound++;
          }
        }
      }
    } catch (err) {
      console.error(chalk.red(`Erro ao verificar arquivo ${filePath}:`), err);
    }
  }
}

main().catch(err => {
  console.error(chalk.red('Erro ao executar verifica√ß√£o ortogr√°fica:'), err);
  process.exit(1);
}); 